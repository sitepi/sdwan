name: Build

on:
  push:
    tags:
      - 'v*'  # 匹配所有以 v 开头的标签，如 v1.0.0
  workflow_dispatch:  # 保留手动触发选项

# 添加权限配置
permissions:
  contents: write  # 允许工作流写入仓库内容（包括创建发布）
  packages: write  # 如果需要的话，允许发布包

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget liblua5.1-0-dev lua5.1 luarocks

    - name: Cache OpenWrt SDK
      id: cache-sdk
      uses: actions/cache@v3
      with:
        path: |
          openwrt-sdk-*.tar.xz
          sdk
        key: ${{ runner.os }}-openwrt-sdk-${{ hashFiles('version.txt') }}

    - name: Download OpenWrt SDK
      if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        SDK_URL="https://downloads.openwrt.org/releases/23.05.2/targets/x86/64/openwrt-sdk-23.05.2-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        curl -L -o openwrt-sdk.tar.xz "$SDK_URL"
        echo "SDK_HASH=$(sha256sum openwrt-sdk.tar.xz | cut -d' ' -f1)" >> $GITHUB_ENV

    - name: Setup SDK
      if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        tar xf openwrt-sdk.tar.xz
        mv openwrt-sdk-* sdk
        cd sdk
        
        # 使用默认的 feeds.conf.default
        cp feeds.conf.default feeds.conf
        
        # 更新和安装 feeds
        ./scripts/feeds clean
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # 创建必要的符号链接
        mkdir -p package/sitepi
        ln -sf $GITHUB_WORKSPACE/package/sitepi/* package/sitepi/
        mkdir -p package/luci-app-sitepi
        ln -sf $GITHUB_WORKSPACE/luci/* package/luci-app-sitepi/

    - name: Build package
      run: |
        cd sdk
        
        # 确保 staging_dir 存在
        [ -d staging_dir ] || mkdir -p staging_dir
        
        # 配置编译选项
        cat > .config <<EOF
        CONFIG_ALL_NONSHARED=y
        CONFIG_ALL=y
        CONFIG_PACKAGE_lua=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-lib-base=y
        CONFIG_PACKAGE_luci-lib-ip=y
        CONFIG_PACKAGE_luci-lib-jsonc=y
        CONFIG_PACKAGE_luci-lib-nixio=y
        CONFIG_PACKAGE_luci-lib-web=y
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        EOF
        
        make defconfig
        make package/sitepi/compile V=s || make package/sitepi/compile V=s
        make package/luci-app-sitepi/compile V=s || make package/luci-app-sitepi/compile V=s

    - name: Build Ubuntu DEB package
      run: |
        mkdir -p deb-package
        cd deb-package
        # 创建 DEB 包的控制文件
        mkdir -p DEBIAN
        echo "Package: sitepi" > DEBIAN/control
        echo "Version: ${GITHUB_REF_NAME#v}" >> DEBIAN/control
        echo "Architecture: all" >> DEBIAN/control
        echo "Maintainer: Jie Song <jsong@routerplus.com>" >> DEBIAN/control
        echo "Description: SitePi SDWAN Client" >> DEBIAN/control
        echo "Depends: wireguard-tools" >> DEBIAN/control
        
        # 创建 systemd 服务文件
        mkdir -p etc/systemd/system
        cp $GITHUB_WORKSPACE/linux/sitepi.service etc/systemd/system/
        
        # 复制执行文件并设置权限
        mkdir -p usr/bin
        cp $GITHUB_WORKSPACE/package/sitepi/files/sitepi usr/bin/
        cp $GITHUB_WORKSPACE/linux/sitepi.ubuntu usr/bin/
        chmod +x usr/bin/sitepi
        chmod +x usr/bin/sitepi.ubuntu
        
        cd ..
        # 创建 DEB 包
        dpkg-deb --build deb-package

    - name: Collect artifacts
      run: |
        mkdir -p artifacts
        # 只收集特定的包
        find sdk/bin/packages -name "sitepi_*.ipk" -exec cp {} artifacts/ \;
        find sdk/bin/packages -name "luci-app-sitepi_*.ipk" -exec cp {} artifacts/ \;
        # 收集 DEB 包
        cp deb-package.deb artifacts/sitepi_${{ github.ref_name }}_all.deb

    - name: List artifacts
      run: |
        echo "Listing artifacts directory:"
        ls -la artifacts

    - name: Calculate SHA256
      id: sha
      run: |
        cd artifacts
        echo "SUMS<<EOF" >> $GITHUB_OUTPUT
        sha256sum *.ipk *.deb >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload to GitHub Assets
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts/*.ipk artifacts/*.deb
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## SitePi SDWAN Release ${{ github.ref_name }}
          
          ### Installation
          Download and install the following packages:
          - sitepi_${{ github.ref_name }}_all.ipk
          - luci-app-sitepi_${{ github.ref_name }}_all.ipk
          - sitepi_${{ github.ref_name }}_all.deb
          
          ```bash
          opkg install sitepi_${{ github.ref_name }}_all.ipk
          opkg install luci-app-sitepi_${{ github.ref_name }}_all.ipk
          dpkg -i sitepi_${{ github.ref_name }}_all.deb
          ```
          
          ### SHA256 Checksums
          ```
          ${{ steps.sha.outputs.SUMS }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: artifacts/*.ipk artifacts/*.deb
        retention-days: 7