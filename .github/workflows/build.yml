name: Build

on:
  push:
    tags:
      - 'v*'  # Match all tags starting with v, e.g. v1.0.0
  workflow_dispatch:  # Keep manual trigger option

# Add permissions configuration
permissions:
  contents: write  # Allow workflow to write repository content (including creating releases)
  packages: write  # Allow package publishing if needed

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget liblua5.1-0-dev lua5.1 luarocks rustc cargo mingw-w64 wine

    - name: Build Windows package
      run: |
        rustup default stable
        rustup update
        rustup target add x86_64-pc-windows-gnu
        rustup target add i686-pc-windows-gnu

        # Build Windows version using Rust
        cd windows
        # 添加优化和安全编译选项
        RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-s" cargo build --release --target x86_64-pc-windows-gnu
        RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-s" cargo build --release --target i686-pc-windows-gnu

        # Strip the binaries
        x86_64-w64-mingw32-strip target/x86_64-pc-windows-gnu/release/sitepi.exe
        i686-w64-mingw32-strip target/i686-pc-windows-gnu/release/sitepi.exe

        cargo build --release --target x86_64-pc-windows-gnu
        cargo build --release --target i686-pc-windows-gnu

        # Create Windows amd64 package
        mkdir -p sitepi-windows-x64
        cp target/x86_64-pc-windows-gnu/release/sitepi.exe sitepi-windows-x64/
        cp wireguard-nt/bin/amd64/wireguard.dll sitepi-windows-x64/
        mkdir -p sitepi-windows-x64/configs

        # Create a zip package for Windows amd64
        zip -r sitepi-windows-x64.zip sitepi-windows-x64
        mv sitepi-windows-x64.zip ..

        # Create Windows i686 package
        mkdir -p sitepi-windows-x86
        cp target/i686-pc-windows-gnu/release/sitepi.exe sitepi-windows-x86/
        cp wireguard-nt/bin/x86/wireguard.dll sitepi-windows-x86/
        mkdir -p sitepi-windows-x86/configs
        
        # Create a zip package for Windows i686
        zip -r sitepi-windows-x86.zip sitepi-windows-x86
        mv sitepi-windows-x86.zip ..

        cd ..

    - name: Cache OpenWrt SDK
      id: cache-sdk
      uses: actions/cache@v4
      with:
        path: |
          openwrt-sdk-*.tar.xz
          sdk
        key: ${{ runner.os }}-openwrt-sdk-23.05.2  # Use OpenWrt version number as key

    - name: Download OpenWrt SDK
      if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        SDK_URL="https://downloads.openwrt.org/releases/23.05.2/targets/x86/64/openwrt-sdk-23.05.2-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        curl -L -o openwrt-sdk.tar.xz "$SDK_URL"
        echo "SDK_HASH=$(sha256sum openwrt-sdk.tar.xz | cut -d' ' -f1)" >> $GITHUB_ENV

    - name: Setup SDK
      if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        tar xf openwrt-sdk.tar.xz
        mv openwrt-sdk-* sdk
        cd sdk
        
        # Use default feeds.conf.default
        cp feeds.conf.default feeds.conf
        
        # Update and install feeds
        ./scripts/feeds clean
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Build package
      run: |
        cd sdk
        
        # Ensure staging_dir exists
        [ -d staging_dir ] || mkdir -p staging_dir
        
        # Configure build options
        cat > .config <<EOF
        CONFIG_ALL_NONSHARED=y
        CONFIG_ALL=y
        CONFIG_PACKAGE_lua=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-lib-base=y
        CONFIG_PACKAGE_luci-lib-ip=y
        CONFIG_PACKAGE_luci-lib-jsonc=y
        CONFIG_PACKAGE_luci-lib-nixio=y
        CONFIG_PACKAGE_luci-lib-web=y
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        EOF

        # Create necessary symbolic links
        rm -rf package/sitepi package/luci-app-sitepi
        mkdir -p package/sitepi
        cp -rf $GITHUB_WORKSPACE/package/sitepi package/sitepi/
        mkdir -p package/luci-app-sitepi
        cp -rf $GITHUB_WORKSPACE/package/luci-app-sitepi package/luci-app-sitepi/
        
        make defconfig
        make package/sitepi/compile V=s || make package/sitepi/compile V=s
        make package/luci-app-sitepi/compile V=s || make package/luci-app-sitepi/compile V=s

    - name: Build Ubuntu DEB package
      run: |
        mkdir -p deb-package
        cd deb-package
        # Create DEB package control file
        mkdir -p DEBIAN
        echo "Package: sitepi" > DEBIAN/control
        echo "Version: ${GITHUB_REF_NAME#v}" >> DEBIAN/control
        echo "Architecture: all" >> DEBIAN/control
        echo "Maintainer: Jie Song <jsong@routerplus.com>" >> DEBIAN/control
        echo "Description: SitePi SDWAN Client" >> DEBIAN/control
        echo "Depends: wireguard-tools" >> DEBIAN/control
        
        # Create systemd service file
        mkdir -p etc/systemd/system
        cp $GITHUB_WORKSPACE/linux/sitepi.service etc/systemd/system/
        
        # Create configuration file
        mkdir -p etc/sitepi
        cp $GITHUB_WORKSPACE/linux/config.init etc/sitepi/config
        
        # Copy executable files and set permissions
        mkdir -p usr/bin
        cp $GITHUB_WORKSPACE/package/sitepi/files/sitepi usr/bin/
        cp $GITHUB_WORKSPACE/linux/sitepi.ubuntu usr/bin/
        chmod +x usr/bin/sitepi
        chmod +x usr/bin/sitepi.ubuntu
        
        cd ..
        # Create DEB package
        dpkg-deb --build deb-package

    - name: Collect artifacts
      run: |
        mkdir -p artifacts
        # Only collect specific packages
        find sdk/bin/packages -name "sitepi_*.ipk" -exec cp {} artifacts/ \;
        find sdk/bin/packages -name "luci-app-sitepi_*.ipk" -exec cp {} artifacts/ \;
        # Collect DEB package
        cp deb-package.deb artifacts/sitepi_${GITHUB_REF_NAME#v}_all.deb
        cp sitepi-windows-x64.zip artifacts/
        cp sitepi-windows-x86.zip artifacts/

    - name: List artifacts
      run: |
        echo "Listing artifacts directory:"
        ls -la artifacts

    - name: Calculate SHA256
      id: sha
      run: |
        cd artifacts
        echo "SUMS<<EOF" >> $GITHUB_OUTPUT
        sha256sum *.ipk *.deb *.zip >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload to GitHub Assets
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts/*
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## SitePi SDWAN Release ${{ github.ref_name }}
          
          ### SHA256 Checksums
          ```
          ${{ steps.sha.outputs.SUMS }}
          ```
          **Full Changelog**: https://github.com/sitepi/sdwan/compare/v0.0.6...v0.0.8
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: artifacts/*.*
        retention-days: 7
