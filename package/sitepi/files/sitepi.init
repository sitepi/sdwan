#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1
PROG=/usr/bin/sitepi

service_triggers() {
    procd_add_reload_trigger "sitepi"
}

check_network() {
    local cfg="$1"
    local enabled interface
    
    config_get_bool enabled "$cfg" 'enabled' '0'
    [ "$enabled" -eq 1 ] || return 0
    
    config_get interface "$cfg" 'interface'
    
    # Check necessary parameters
    [ -n "$interface" ] || { logger -t "sitepi[$cfg]" "Error: interface is required"; return 1; }
    
    # Check dependencies
    if ! command -v wg >/dev/null 2>&1; then
        logger -t "sitepi[$cfg]" "Error: wireguard-tools not found"
        return 1
    fi
    
    if ! command -v curl >/dev/null 2>&1; then
        logger -t "sitepi[$cfg]" "Error: curl not found"
        return 1
    fi
    
    return 0
}

start_network() {
    local cfg="$1"
    local enabled host interface network_id
    
    config_get_bool enabled "$cfg" 'enabled' '0'
    [ "$enabled" -eq 1 ] || return 0
    
    config_get host "$cfg" 'host'
    config_get interface "$cfg" 'interface'
    config_get network_id "$cfg" 'network_id'
    
    # Check network configuration
    check_network "$cfg" || return 1
    
    procd_open_instance "$cfg"
    procd_set_param command $PROG
    [ -n "$host" ] && procd_append_param command -h "$host"
    procd_append_param command -i "$interface"
    [ -n "$network_id" ] && procd_append_param command -n "$network_id"
    procd_set_param respawn
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_close_instance
    
    logger -t "sitepi[$cfg]" "Network started"
}

start_service() {
    config_load 'sitepi'
    
    local enabled
    config_get_bool enabled 'global' 'enabled' '0'
    [ "$enabled" -eq 1 ] || return 1
    
    config_foreach start_network 'network'
}

stop_service() {
    # First, try to gracefully terminate the process
    local pids=$(pgrep -f "^$PROG")
    if [ -n "$pids" ]; then
        logger -t sitepi "Stopping sitepi processes..."
        
        # Send SIGINT signal
        kill -SIGINT $pids 2>/dev/null
        
        # Wait for the process to exit, up to 5 seconds
        local timeout=5
        while [ $timeout -gt 0 ]; do
            if ! pgrep -f "^$PROG" >/dev/null 2>&1; then
                break
            fi
            sleep 1
            timeout=$((timeout - 1))
        done
        
        # If the process still exists, force terminate
        if [ $timeout -eq 0 ]; then
            logger -t sitepi "Force killing remaining processes..."
            local remaining_pids=$(pgrep -f "^$PROG")
            [ -n "$remaining_pids" ] && kill -9 $remaining_pids 2>/dev/null
        fi
    fi
    
    # Ensure all related curl processes are also terminated
    local curl_pids=$(pgrep -f "curl.*sitepi")
    if [ -n "$curl_pids" ]; then
        logger -t sitepi "Stopping related curl processes..."
        kill -SIGINT $curl_pids 2>/dev/null
        sleep 1
        # Force terminate still running curl processes
        curl_pids=$(pgrep -f "curl.*sitepi")
        [ -n "$curl_pids" ] && kill -9 $curl_pids 2>/dev/null
    fi
    
    logger -t sitepi "All networks stopped"
}

reload_service() {
    stop
    start
}

status() {
    config_load 'sitepi'
    
    local enabled
    config_get_bool enabled 'global' 'enabled' '0'
    echo "Global status: $([ "$enabled" -eq 1 ] && echo "enabled" || echo "disabled")"
    
    config_foreach print_network_status 'network'
}

print_network_status() {
    local cfg="$1"
    local enabled interface
    
    config_get_bool enabled "$cfg" 'enabled' '0'
    config_get interface "$cfg" 'interface'
    
    echo "Network $cfg:"
    echo "  Enabled: $([ "$enabled" -eq 1 ] && echo "yes" || echo "no")"
    echo "  Interface: $interface"
    echo "  Running: $(pgrep -f "sitepi.*-i $interface" >/dev/null && echo "yes" || echo "no")"
} 