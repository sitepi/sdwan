#!/bin/sh

# Default parameters
HOST="https://sitepi.net"
NETWORK_ID=""
INTERFACE=""

# Global variables
BASE_DELAY=1
MAX_DELAY=60

# Help information
show_help() {
	echo "Usage: $0 [options]"
	echo "Options:"
	echo "	-h, --host        Server address (optional)"
	echo "	-i, --interface   WireGuard interface name (required)"
	echo "	-n, --network     Network ID (optional)"
	echo "	--help            Show this help message"
	echo
	echo "Example:"
	echo "	$0 --interface wg0"
	exit 1
}

# Validate required parameters
validate_params() {
	local errors=0

	if [ -z "$HOST" ]; then
		echo "Error: Server address (--host) is required"
		errors=$((errors + 1))
	fi

	if [ -z "$INTERFACE" ]; then
		echo "Error: WireGuard interface name (--interface) is required"
		errors=$((errors + 1))
	fi

	# If any errors found, show help and exit
	if [ $errors -gt 0 ]; then
		echo
		show_help
	fi
}

# Check root privileges
check_root() {
	if [ "$(id -u)" -ne 0 ]; then
		echo "Error: Root privileges required to access WireGuard configuration"
		exit 1
	fi
}

# Check required commands
check_commands() {
	local missing_commands=""
	
	for cmd in wg ip curl; do
		if ! command -v $cmd >/dev/null 2>&1; then
			missing_commands="$missing_commands $cmd"
		fi
	done
	
	if [ -n "$missing_commands" ]; then
		echo "Error: Missing required commands:$missing_commands"
		echo "Please install the missing packages and try again"
		exit 1
	fi
}

# Create WireGuard interface
create_wg_interface() {
	echo "Creating WireGuard interface $INTERFACE..."
	
	# Check if the interface already exists
	if ip link show "$INTERFACE" >/dev/null 2>&1; then
		echo "Interface $INTERFACE already exists, using existing interface..."
		# Get the public key of the existing interface
		public_key=$(wg show "$INTERFACE" public-key)
		if [ -z "$public_key" ]; then
			echo "Error: Failed to get public key from existing interface"
			exit 1
		fi
		echo "Using existing interface with public key: $public_key"
		echo "$public_key"
		return 0
	fi
	
	# Try to read configuration from /etc/wireguard
	if [ -f "/etc/wireguard/$INTERFACE.conf" ]; then
		echo "Found existing configuration in /etc/wireguard/$INTERFACE.conf"
		
		# Read private key, using a more reliable way to parse the config file
		private_key=$(sed -n 's/^PrivateKey[[:space:]]*=[[:space:]]*\([^[:space:]]*\)[[:space:]]*$/\1/p' "/etc/wireguard/$INTERFACE.conf")
		if [ -z "$private_key" ]; then
			echo "Error: Failed to read private key from config file"
			exit 1
		fi
		
		# Validate private key format
		if [ ${#private_key} -ne 44 ]; then
			echo "Error: Invalid private key format in config file (length=${#private_key}, expected=44)"
			exit 1
		fi
		
		# Generate public key
		public_key=$(echo "$private_key" | wg pubkey 2>/dev/null)
		if [ -z "$public_key" ]; then
			echo "Error: Failed to generate public key from private key"
			exit 1
		fi
		
		echo "Using existing configuration"
	else
		echo "No existing configuration found, generating new keys..."
		# Check if the WireGuard module is loaded
		if ! lsmod | grep -q wireguard; then
			echo "Loading WireGuard kernel module..."
			if ! modprobe wireguard; then
				echo "Error: Failed to load WireGuard kernel module"
				exit 1
			fi
			sleep 1
		fi
		
		# Generate new keys
		private_key=$(wg genkey) || {
			echo "Error: Failed to generate private key"
			exit 1
		}
		
		public_key=$(echo "$private_key" | wg pubkey) || {
			echo "Error: Failed to generate public key"
			exit 1
		}
		
		# Save configuration to /etc/wireguard
		if [ -d "/etc/wireguard" ]; then
			echo "Saving configuration to /etc/wireguard/$INTERFACE.conf"
			cat > "/etc/wireguard/$INTERFACE.conf" << EOF
[Interface]
PrivateKey = $private_key
EOF
			chmod 600 "/etc/wireguard/$INTERFACE.conf"
		fi
	fi
	
	# Create the interface
	echo "Creating new interface..."
	if ! ip link add dev "$INTERFACE" type wireguard; then
		echo "First attempt to create interface failed, trying again..."
		if ! ip link add dev "$INTERFACE" type wireguard; then
			echo "Error: Failed to create interface"
			exit 1
		fi
	fi
	
	# Configure the interface
	echo "Configuring interface..."
	if ! echo "$private_key" | wg set "$INTERFACE" private-key /dev/stdin; then
		echo "Error: Failed to configure WireGuard interface"
		ip link delete dev "$INTERFACE"
		exit 1
	fi
	
	# Enable the interface
	if ! ip link set up dev "$INTERFACE"; then
		echo "Error: Failed to enable interface"
		ip link delete dev "$INTERFACE"
		exit 1
	fi
	
	# Set MTU
	ip link set dev "$INTERFACE" mtu 1420 2>/dev/null
	
	# Verify the interface
	if ! ip link show dev "$INTERFACE" >/dev/null 2>&1; then
		echo "Error: Interface verification failed"
		exit 1
	fi
	
	# Get the port assigned by the system
	listen_port=$(wg show "$INTERFACE" listen-port)
	
	echo "WireGuard interface created successfully"
}

# Get WireGuard interface information
get_wg_info() {
	local wg_info=""

	# Verify the interface again
	if ! wg show "$INTERFACE" >/dev/null 2>&1; then
		echo "Error: Interface verification failed after creation"
		exit 1
	fi

	# Get public key and listen port
	local public_key=$(wg show "$INTERFACE" public-key)
	local listen_port=$(wg show "$INTERFACE" listen-port)

	# Validate data
	if [ -z "$public_key" ] || [ -z "$listen_port" ]; then
		echo "Error: Failed to get complete WireGuard configuration"
		exit 1
	fi

	# Return formatted output
	printf "%s:%s\n" "$public_key" "$listen_port"
}

# Cleanup function
cleanup() {
	echo
	echo "\033[33mPerforming cleanup...\033[0m"
	exit 0
}

# Parse command line arguments
while [ $# -gt 0 ]; do
	case $1 in
		-h|--host)
			HOST="$2"
			if [ -z "$HOST" ]; then
				echo "Error: --host requires a value"
				show_help
			fi
			shift 2
			;;
		-i|--interface)
			INTERFACE="$2"
			if [ -z "$INTERFACE" ]; then
				echo "Error: --interface requires a value"
				show_help
			fi
			shift 2
			;;
		-n|--network)
			NETWORK_ID="$2"
			if [ -z "$NETWORK_ID" ]; then
				echo "Error: --network requires a value"
				show_help
			fi
			shift 2
			;;
		--help)
			show_help
			;;
		*)
			echo "Error: Unknown parameter: $1"
			show_help
			;;
	esac
done

# Validate required parameters before proceeding
validate_params

# Check privileges and required commands
check_root
check_commands

# Set cleanup on exit
trap cleanup INT TERM QUIT

# Mark if interface is newly created
INTERFACE_CREATED=false
if ! ip link show "$INTERFACE" >/dev/null 2>&1; then
	INTERFACE_CREATED=true
fi
	
# Check if interface exists and is properly configured
if ! ip link show "$INTERFACE" type wireguard >/dev/null 2>&1; then
	echo "Interface $INTERFACE does not exist or is not a WireGuard interface, creating..."
	create_wg_interface
	# Give it a moment to fully initialize
	sleep 1
fi

# Get WireGuard information
wg_output=$(get_wg_info)
if [ $? -ne 0 ]; then
	echo "Error getting WireGuard information"
	exit 1
fi

PUBKEY=$(echo "$wg_output" | cut -d: -f1)
LISTEN_PORT=$(echo "$wg_output" | cut -d: -f2)

if [ -z "$PUBKEY" ] || [ -z "$LISTEN_PORT" ]; then
	echo "Error: Failed to parse WireGuard information"
	exit 1
fi

echo "Using interface $INTERFACE:"
echo " Public key: $PUBKEY"
echo "Listen port: $LISTEN_PORT"

# generate random numbers
random() {
	awk -v min="$1" -v max="$2" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
}

# modify backoff algorithm
do_with_retry() {
	local attempt=0
	local base_delay=1
	local max_delay=120  # Maximum delay time is 120 seconds
	local action_name="$1"
	local action_func="$2"
	
	while true; do
		if [ "$RUNNING" != "true" ]; then
			return 0
		fi
		
		# Directly use the function, do not use eval
		if ! $action_func; then
			printf "\033[33m%s failed\033[0m\n" "$action_name"
			
			# Calculate base delay time, using exponential backoff but limiting maximum value to 115 seconds (reserving space for random delay)
			local delay=$base_delay
			i=1
			while [ $i -lt $attempt ] && [ $delay -lt $((max_delay - 5)) ]; do
				delay=$((delay * 2))
				[ $delay -gt $((max_delay - 5)) ] && delay=$((max_delay - 5))  # Ensure base delay does not exceed 115 seconds
				i=$((i + 1))
			done
			
			# Add a random delay of 0-5 seconds
			local random_seconds=$(random 0 4)  # Generate a random number between 0-4
			delay=$((delay + random_seconds))
			
			# Ensure total delay does not exceed maximum value
			[ $delay -gt $max_delay ] && delay=$max_delay
			
			printf "\033[33mRetrying in %d seconds (attempt %d)...\033[0m\n" \
				"$delay" "$attempt"
			
			# Wait for the delay time
			sleep $delay
			
			# If maximum delay is reached, reset backoff algorithm
			if [ $delay -ge $max_delay ]; then
				printf "\033[33mReached max delay, resetting backoff...\033[0m\n"
				attempt=0
				base_delay=1
				delay=$base_delay
			fi
			
			attempt=$((attempt + 1))
			base_delay=$((base_delay * 2))
			[ $base_delay -gt $((max_delay - 5)) ] && base_delay=$((max_delay - 5))
			
			continue
		fi
		
		# Operation successful, reset counter
		attempt=0
		base_delay=1
		return 0
	done
}

# clear session information
clear_session() {
	SESSION_ID=""
	NEXT_URL=""
	ASSIGNED_IP=""
	NETWORK_NAME=""
}

# Modify authorization
do_authorize() {
	# Prefer to try IPv6 connection
	response=$(curl -6 -X POST -i -s \
		-H 'User-Agent: sitepi' \
		-H "PUBKEY: $PUBKEY" \
		-H "LISTEN-PORT: $LISTEN_PORT" \
		${NETWORK_ID:+-H "NETWORK-ID: $NETWORK_ID"} \
		"$HOST/authorize" 2>&1)
	status=$?
	
	# If IPv6 connection fails, try IPv4
	if [ $status -ne 0 ]; then
		printf "\033[33mIPv6 connection failed, trying IPv4...\033[0m\n"
		response=$(curl -4 -X POST -i -s \
			-H 'User-Agent: sitepi' \
			-H "PUBKEY: $PUBKEY" \
			-H "LISTEN-PORT: $LISTEN_PORT" \
			${NETWORK_ID:+-H "NETWORK-ID: $NETWORK_ID"} \
			"$HOST/authorize" 2>&1)
		status=$?
	fi
	
	if [ $status -ne 0 ]; then
		printf "\033[31mError: Connection failed\033[0m\n"
		echo "Failed to connect to $HOST"
		clear_session
		return 1
	fi
	
	# Check if the response is empty
	if [ -z "$response" ]; then
		printf "\033[31mError: Empty response from server\033[0m\n"
		clear_session
		return 1
	fi
	
	# Extract information from response headers
	SESSION_ID=$(echo "$response" | grep -i '^X-SESSION:' | cut -d' ' -f2 | tr -d '\r\n')
	NEXT_URL=$(echo "$response" | grep -i '^X-URL:' | cut -d' ' -f2 | tr -d '\r\n')
	NEXT_PROXY=$(echo "$response" | grep -i '^X-PROXY:' | cut -d' ' -f2 | tr -d '\r\n')
	ASSIGNED_IP=$(echo "$response" | grep -i '^X-IPADDR:' | cut -d' ' -f2 | tr -d '\r\n')
	NETWORK_NAME=$(echo "$response" | grep -i '^X-NETWORK:' | cut -d' ' -f2 | tr -d '\r\n')
	
	if [ -z "$SESSION_ID" ] || [ -z "$NEXT_URL" ] || [ -z "$ASSIGNED_IP" ]; then
		printf "\033[31mError: Failed to get complete session information\033[0m\n"
		echo "Response:"
		echo "$response" | sed 's/^/  /'
		clear_session
		return 1
	fi
	
	echo "  session ID: $SESSION_ID"
	echo "    next URL: $NEXT_URL"
	echo "  with PROXY: $NEXT_PROXY"
	echo " assigned IP: $ASSIGNED_IP"
	echo "network NAME: ${NETWORK_NAME:-unknown}"
	printf "\033[32mAuthorization successful\033[0m\n"

	# Configure interface IP address
	if ! ip addr show dev "$INTERFACE" | grep -q "$ASSIGNED_IP"; then
		# Delete old IP address
		ip addr flush dev "$INTERFACE" 2>/dev/null
		
		# Add new IP address
		if ip addr add "$ASSIGNED_IP/24" dev "$INTERFACE" 2>/dev/null; then
			echo '' # "Configured interface IP: $ASSIGNED_IP"
		else
			printf "\033[31mError: Failed to configure interface IP\033[0m\n"
			return 1
		fi
	else
		echo "" # "Interface already has IP: $ASSIGNED_IP"
	fi

	return 0
}

# Modify SSE connection
do_sse_connect() {
	# Check if session information is valid
	if [ -z "$SESSION_ID" ] || [ -z "$NEXT_URL" ]; then
		printf "\033[33mMissing session information, need to re-authorize\033[0m\n"
		clear_session
		return 1
	fi
	
	echo "Connecting to $NEXT_URL"
	
	# Use a temporary file to store exit status
	local tmpfile=$(mktemp)
	echo "56" > "$tmpfile"
	
	# curl parameters explanation:
	# --no-buffer: Disable output buffering
	# --connect-timeout 5: Connection timeout
	# --max-time 864000: Wait (10 days)
	# --keepalive-time 24: Keep connection alive
	# --retry 5: automatic retries 5 times
	# --http2: Use HTTP/2
	(curl --no-buffer \
		--connect-timeout 5 \
		--max-time 864000 \
		--keepalive-time 24 \
		--retry 3 \
		--http2 \
		-H 'User-agent: sitepi' \
		-H "X-SESSION: $SESSION_ID" \
		${NEXT_PROXY:+-x $NEXT_PROXY} \
		-N "$NEXT_URL" 2>/dev/null || echo $? > "$tmpfile") | while read -r line; do
		if ! $RUNNING; then
			break
		fi
		process_message "$line"
	done
	
	# Read curl's exit status
	local pipe_status=$(cat "$tmpfile")
	rm -f "$tmpfile"
	
	# Check if it exited due to a signal
	if ! $RUNNING; then
		return 0
	fi
	
	# Handle connection status
	case $pipe_status in
		0)  # Normal closure (including server disconnection)
			printf "\033[33mConnection closed\033[0m\n"
			clear_session
			return 1
			;;
		28) # Operation timeout
			printf "\033[31mConnection timeout\033[0m\n"
			clear_session
			return 1
			;;
		52) # Server empty response
			printf "\033[31mEmpty reply from server\033[0m\n"
			clear_session
			return 1
			;;
		56) # Connection reset
			printf "\033[31mConnection reset by peer\033[0m\n"
			clear_session
			return 1
			;;
		*)  # Other errors
			printf "\033[31mConnection failed with error code %d\033[0m\n" "$pipe_status"
			clear_session
			return 1
			;;
	esac
}

# Modify the keepalive handling part in the process_message function
process_message() {
	local line="$1"
	
	# Handle empty lines
	if [ -z "$line" ]; then
		return 0
	fi
	
	# Use IFS to split fields
	OLDIFS="$IFS"
	IFS=' '
	set -- $line
	IFS="$OLDIFS"
	
	# Parse fields
	local action="$1"
	local peer_pubkey="$2"
	local preshared_key="$3"
	local endpoint="$4"
	local allowed_ips="$5"
	local keepalive="$6"
	
	case "$action" in
		wg)
			# Validate fields
			if [ -n "$peer_pubkey" ] && [ -n "$keepalive" ]; then
				# Check if it's our own public key
				if [ "$peer_pubkey" = "$PUBKEY" ]; then
					# Get the current IP address of the interface
					local current_ip=$(ip addr show dev "$INTERFACE" | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
					
					# Check if allowed_ips is not empty and contains a different IP
					if [ -n "$allowed_ips" ] && [[ "$allowed_ips" != *"$current_ip"* ]]; then
						# Validate allowed_ips format
						if ! echo "$allowed_ips" | grep -qE '^(0\.0\.0\.0|[1-9][0-9]?\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}|[1-9][0-9]?:[0-9a-fA-F]{0,4}(:[0-9a-fA-F]{0,4}){0,7})$'; then
							echo "Skipping invalid allowed IPs: $allowed_ips"
							return 0
						fi
						# Update the new ipaddress to the interface
						echo "Updating interface IP: $current_ip"
						ip addr del "$current_ip" dev "$INTERFACE"  # Delete old IP address
						ip addr add "$allowed_ips" dev "$INTERFACE"  # Add the new IP to the interface
					fi
					return 0
				fi

				# Handle endpoint
				if [ "$endpoint" != "x" ]; then
					# Handle IPv4-mapped IPv6 address
					if echo "$endpoint" | grep -q "^\[::ffff:"; then
						# Extract IPv4 part and port
						local ipv4_part=$(echo "$endpoint" | sed 's/\[::ffff:\([0-9.]*\)\]:\([0-9]*\)/\1/')
						local port_part=$(echo "$endpoint" | sed 's/\[::ffff:\([0-9.]*\)\]:\([0-9]*\)/\2/')
						endpoint="$ipv4_part:$port_part"
						echo "Converted IPv6 endpoint to IPv4: $endpoint"
					fi
				fi

				echo " peer: $peer_pubkey $preshared_key $endpoint $allowed_ips $keepalive"

				# Remove the corresponding pubkey before configuration
				wg set "$INTERFACE" peer "$peer_pubkey" remove

				# Configure WireGuard peer
				# Prepare common parameters
				local params=""
				if [ "$preshared_key" != "x" ]; then params="$params preshared-key $preshared_key"; fi
				if [ "$allowed_ips" != "x" ]; then params="$params allowed-ips $allowed_ips"; fi
				if [ "$endpoint" != "x" ]; then params="$params endpoint $endpoint"; fi
				if [ "$keepalive" != "x" ]; then params="$params persistent-keepalive $keepalive"; fi

				# Set the peer with the prepared parameters
				if [ -n "$params" ]; then
					wg set $INTERFACE peer $peer_pubkey $params
					echo "Updated peer: $peer_pubkey"
				else
					echo "Removed peer: $peer_pubkey"
				fi

				# Configure routes only if allowed_ips is not "x" or "0.0.0.0/0"
				if [ "$allowed_ips" != "x" ] && [ "$allowed_ips" != "0.0.0.0/0" ]; then
					# Save old IFS
					OLDIFS="$IFS"
					# Set IFS to comma
					IFS=','

					local peer_ip=""
					# Iterate over all IPs
					for ip in $allowed_ips; do
						# Trim leading and trailing spaces (keep /32, /24, /16, /8)
						ip=$(echo "$ip" | xargs)  # Use xargs to remove leading and trailing spaces

						# Skip 0.0.0.0/0 or routes containing 0.0.0.0
						if echo "$ip" | grep -q "^0\.0\.0\.0"; then
							echo "Skipping route: $ip (zero route not allowed)"
							continue
						fi

						if [ -z "$peer_ip" ]; then
							peer_ip="$ip"
							# Configure the route for the peer's interface IP separately
							ip route del "$peer_ip" dev "$INTERFACE" 2>/dev/null
							ip route add "$peer_ip" dev "$INTERFACE"
							echo "Added route: $peer_ip"
							continue
						fi
						
						# Delete old route
						ip route del "$ip" 2>/dev/null
						
						# Add new route
						if ! ip route add "$ip" via "$peer_ip"; then
							printf "\033[31mError: Failed to add route for %s\033[0m\n" "$ip"
						else
							echo "Added route: $ip via $peer_ip"
						fi
					done
					
					# Restore original IFS
					IFS="$OLDIFS"
				fi
			fi
			;;
		*)
			if [ -n "$line" ]; then
				echo "Unknown message: $line"
			fi
			;;
	esac
	return 0
}

# Initialize variables
RUNNING=true

# Set signal handling
trap 'RUNNING=false; cleanup' INT TERM QUIT

# Main loop
while true
do
	# Check if need to exit
	if [ "$RUNNING" != "true" ]; then
			cleanup
		exit 0
	fi

	# Clear previous session information
	clear_session
		
	# Check session status and authorize
	if [ -z "$SESSION_ID" ] || [ -z "$NEXT_URL" ]; then
		printf "\033[33mAuthorizing...\033[0m\n"
		if ! do_with_retry "Authorization" do_authorize
		then
			printf "\033[31mFailed to authorize after multiple attempts\033[0m\n"
			cleanup
			exit 1
		fi
	fi
		
	# Try to establish SSE connection
	if ! do_sse_connect; then
		if [ "$RUNNING" != "true" ]; then
			cleanup
			exit 0
		fi
		printf "\033[33mWill re-authorize...\033[0m\n"
		SESSION_ID=""
		NEXT_URL=""
		continue
	fi
		
	# If SSE connection is successful, wait a while before retrying
	# First connection waits randomly between 6-120 seconds
	sleep $(random 6 120)
done